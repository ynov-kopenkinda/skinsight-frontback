name: CI + CD

on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run the workflow on"
        required: true
        default: "main"

jobs:
  setup-project:
    name: Setup & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
  formatting:
    needs: setup-project
    name: Run Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
      - name: Run Prettier
        run: pnpm turbo format
  typechecking:
    needs: setup-project
    name: Run Typechecking Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
      - name: Run Typechecking
        run: pnpm turbo typecheck
  linting:
    needs: setup-project
    name: Run Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
      - name: Run ESLint
        run: pnpm turbo lint
  sonar:
    needs: ["linting"]
    name: Run SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
      - name: Run sonarqube
        run: echo "Sonar impl here"
  build:
    needs: ["linting", "security", "typechecking"]
    name: Run Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
      - name: Run build
        run: pnpm turbo build
  security:
    needs: ["setup-project"]
    name: Run Security Checks
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with cache)
        run: pnpm install
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
  create-docker-image-api:
    needs: ["setup-project", "build"]
    name: Create Docker Image for API
    runs-on: ubuntu-latest
    steps:
      - name: Declare some variables
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          export IMG_NAME=ghcr.io/kopenkinda/api:${{ env.sha_short }}
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker compose build api
      - name: Set up Docker Buildx (multi-platform builds)
        uses: docker/setup-buildx-action@v1
      - name: Authenticate to GitHub Container Registry
        run: echo "${{ secrets.GH_REGISTRY_ACCESS_TOKEN }}" | docker login ghcr.io -u kopenkinda --password-stdin
      - name: Push Docker Image to GitHub Container Registry
        run: docker push ghcr.io/kopenkinda/api:${{ env.sha_short }}
